package pres.zfy.eaims.utils;

import java.sql.*;

/**
 * @Description:数据库工具
 * @Author:赵富源
 * @CreateDate:2019.12.14 13:30
 */
public class MySQLUtil {
    private static String driverName = null;
    private static String url = null;
    private static String userName = null;
    private static String password = null;
    private static Connection conn = null;
    private static Statement stmt = null;
    private static PreparedStatement pStmt = null;
    private static ResultSet rs = null;

    static {
        dbConfig();
    }

    //数据库连接配置
    private static void dbConfig() {
        driverName = "com.mysql.jdbc.Driver";
        url = "jdbc:mysql://localhost:3306/pres_zfy_sims?useUnicode=true&characterEncoding=utf8";
        userName = "root";
        password = "asd123456";
    }

    private static void load() {
        try {
            Class.forName(driverName);
        } catch (ClassNotFoundException e) {
            System.out.println("驱动类" + driverName + "加载异常：" + e.getMessage());
        }
    }

    private static Connection getConn() {
        load();
        try {
            conn = DriverManager.getConnection(url, userName, password);
        } catch (SQLException e) {
            System.out.println("连接数据库失败：" + e.getMessage());
        }
        return conn;
    }

    private static Statement getStmt() {
        try {
            stmt = getConn().createStatement();
        } catch (SQLException e) {
            System.out.println("创建Statement对象失败" + e.getMessage());
        }
        return stmt;
    }

    private static PreparedStatement getPStmt(String SQL,boolean autoGeneratedKeys) {
        try {
            //判断是否返回自动生成的键
            if(autoGeneratedKeys){
                pStmt=getConn().prepareStatement(SQL,Statement.RETURN_GENERATED_KEYS);
            }else{
                pStmt = getConn().prepareStatement(SQL);
            }
        } catch (SQLException e) {
            System.out.println("创建prepareStatement对象失败" + e.getMessage());
        }
        return pStmt;
    }

    /**
     * @param SQL
     * @param params
     * @Author 赵富源
     * @Description 增，删，改
     * @Return int
     */
    public static int doDML(String SQL,Object... params) {
        int status = 0;
        if (params.length > 0) {
            PreparedStatement pStmt = getPStmt(SQL,false);
            try {
                for (int i = 0; i < params.length; i++) {
                    Object object = params[i];
                    pStmt.setObject(i + 1, object);
                }
                status = pStmt.executeUpdate();
            } catch (SQLException e) {
                System.out.println("执行DML失败：" + e.getMessage());
            }
        }
        return status;
    }

    /**
     * @param SQL
     * @param params
     * @Author 赵富源
     * @Description 查
     * @Return java.sql.ResultSet
     */
    public static ResultSet doDQL(String SQL, Object... params) {
        if (params.length > 0) {
            PreparedStatement pStmt = getPStmt(SQL,false);
            try {
                for (int i = 0; i < params.length; i++) {
                    pStmt.setObject(i + 1, params[i]);
                }
                rs = pStmt.executeQuery();
            } catch (SQLException e) {
                System.out.println("执行DQL时发生错误：" + e.getMessage());
            }
        } else {
            Statement stmt = getStmt();
            try {
                rs = stmt.executeQuery(SQL);
            } catch (SQLException e) {
                System.out.println("执行DQL时发生错误：" + e.getMessage());
            }
        }
        return rs;
    }

    /**
    *@param SQL
    *@param params
    *@Author 赵富源
    *@Description 带返回自增值的插入
    *@Return int
    */
    public static int insertAndReturnKeys(String SQL,Object... params){
        int keys = 0;
        if (params.length > 0) {
            PreparedStatement pStmt = getPStmt(SQL,true);
            try {
                for (int i = 0; i < params.length; i++) {
                    Object object = params[i];
                    pStmt.setObject(i + 1, object);
                }
                int status = pStmt.executeUpdate();
                if(status>0){
                    ResultSet rs=pStmt.getGeneratedKeys();
                    if(rs.next()){
                        keys=rs.getInt(1);
                    }
                }
            } catch (SQLException e) {
                System.out.println("执行INSERT失败：" + e.getMessage());
            }
        }
        return keys;
    }

    /**
     * @param
     * @Author 赵富源
     * @Description 释放资源
     * @Return void
     */
    public static void closeAll() {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (pStmt != null) {
            try {
                pStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

}
